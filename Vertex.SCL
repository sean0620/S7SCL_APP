FUNCTION FC1005 : VOID
KNOW_HOW_PROTECT
AUTHOR : JQT
NAME : Measure
VERSION : '1.0'

VAR_INPUT
    AI_Addr : INT ;
    LENGTH : INT ;
    DB_START_ADDR : INT ;
    MEASURE_DB : BLOCK_DB ;                (* DB Type : UDT6 *)
END_VAR

VAR_TEMP    
    Input : REAL ;
    RANGE_LO : REAL ;
    RANGE_HI : REAL ;
    HYS : REAL ;
    OFFSET : REAL ;
    ALM_1ST_SET : REAL ;
    ALM_2ND_SET : REAL ;
    ALM_DB : REAL ;
    MAN_V : REAL ;
    SUBST_V : REAL ;
    LOCUT_V : REAL ;
    PV : REAL ;
    MSG : INT ;
    MODE : INT ;    
    MAN_EN : BOOL ;
    SUBST_EN : BOOL ;
    LOCUT_EN : BOOL ;
    ALM_EN : BOOL ;
    ALM_1ST_IN : BOOL ;
    ALM_2ND_IN : BOOL ;
    I_ERR_IN : BOOL ;
    SET_ERR : BOOL ;
    MSG_EN : BOOL ;
    Calculate : REAL ;
    Result : REAL ;
    Index : INT ;
    Byte_Index : INT ;
    Lo_Temp : REAL ;
    Hi_Temp : REAL ;

   
    
END_VAR

BEGIN ;

    FOR Index := 0 TO (LENGTH - 1) DO
        
        Byte_Index := DB_START_ADDR + Index * 100 ;
        Input := INT_TO_REAL(WORD_TO_INT(PIW[AI_Addr + (Index * 2)])) ; 
        RANGE_LO := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 0]) ;
        RANGE_HI := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 4]) ;
        HYS := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 8]) ;
        OFFSET := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 12]) ;
        ALM_1ST_SET := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 16]) ;
        ALM_2ND_SET := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 20]) ;
        ALM_DB := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 24]) ;
        MAN_V := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 28]) ;
        SUBST_V := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 32]) ;
        LOCUT_V := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 36]) ;
        Calculate := DWORD_TO_REAL(MEASURE_DB.DD[Byte_Index + 40]) ;
        MODE := WORD_TO_INT(MEASURE_DB.DW[Byte_Index + 46]) ;
        MAN_EN := MEASURE_DB.DX[Byte_Index + 48 , 0] ;
        SUBST_EN := MEASURE_DB.DX[Byte_Index + 48 , 1] ;
        LOCUT_EN := MEASURE_DB.DX[Byte_Index + 48 , 2] ;
        MSG_EN := MEASURE_DB.DX[Byte_Index + 48 , 3] ;
        ALM_EN := MEASURE_DB.DX[Byte_Index + 48 , 4] ;
        ALM_1ST_IN := MEASURE_DB.DX[Byte_Index + 48 , 5] ;
        ALM_2ND_IN := MEASURE_DB.DX[Byte_Index + 48 , 6] ;


         
        Lo_Temp := RANGE_LO - (RANGE_HI - RANGE_LO) * 0.0625 ;  (* Measure Range : 3mA ~ 21mA *)
        Hi_Temp := RANGE_Hi + (RANGE_HI - RANGE_LO) * 0.0625 ;
         
        IF Input > 29376.0 OR Input < -1728.0 THEN I_ERR_IN := True ; ELSE I_ERR_IN := False ; END_IF ;    (* Input Out of Range *)
        
        IF MAN_EN THEN Result := MAN_V ; 
        ELSE 
            IF Input <= 29376.0 AND Input >= -1728.0 THEN Result := (((Input + 1728) / 31104.0) * (Hi_Temp - Lo_Temp)) + Lo_Temp + OFFSET ; END_IF ;
            IF LOCUT_EN AND Result < LOCUT_V THEN Result := RANGE_LO ; END_IF ;
            IF NOT(SUBST_EN) THEN 
                IF Input > 29376.0 THEN Result := Hi_Temp ; END_IF ;
                IF Input < -1728.0 THEN Result := Lo_Temp ; END_IF ;
            ELSE
                IF I_ERR_IN THEN Result := SUBST_V ; END_IF ;
            END_IF ;
        END_IF ;
        
        IF HYS>1.0 THEN HYS:=1.0; END_IF;
        IF HYS<0.0 THEN HYS:=0.0; END_IF;
        IF HYS <> 0.0 AND NOT(MAN_EN) AND NOT(SUBST_EN) THEN Calculate := Calculate + (Result - Calculate) * HYS ; ELSE Calculate := Result ; END_IF ;
        IF Calculate < 0.1 AND Calculate > -0.1 THEN Calculate := 0.0 ; END_IF ;
        
 //       IF ALM_2ND_SET <= ALM_1ST_SET
 //       THEN SET_ERR := True ; ELSE SET_ERR := False ; END_IF ;
  
        SET_ERR := False ;

        IF NOT(SET_ERR) THEN
              IF MODE = 0 AND NOT(ALM_1ST_IN) AND NOT(ALM_EN) AND Calculate > ALM_1ST_SET THEN ALM_1ST_IN := True ; END_IF ;
              IF MODE = 0 AND NOT(ALM_2ND_IN) AND NOT(ALM_EN) AND Calculate > ALM_2ND_SET THEN ALM_2ND_IN := True ; END_IF ;
              IF MODE = 1 AND NOT(ALM_1ST_IN) AND NOT(ALM_EN) AND Calculate < ALM_1ST_SET THEN ALM_1ST_IN := True ; END_IF ;
              IF MODE = 1 AND NOT(ALM_2ND_IN) AND NOT(ALM_EN) AND Calculate < ALM_2ND_SET THEN ALM_2ND_IN := True ; END_IF ;
              IF MODE = 0 AND (ALM_1ST_IN AND Calculate < ALM_1ST_SET - ALM_DB) OR ALM_EN THEN ALM_1ST_IN := False ; END_IF ; 
              IF MODE = 0 AND (ALM_2ND_IN AND Calculate < ALM_2ND_SET - ALM_DB) OR ALM_EN THEN ALM_2ND_IN := False ; END_IF ;
              IF MODE = 1 AND (ALM_1ST_IN AND Calculate > ALM_1ST_SET + ALM_DB) OR ALM_EN THEN ALM_1ST_IN := False ; END_IF ; 
              IF MODE = 1 AND (ALM_2ND_IN AND Calculate > ALM_2ND_SET + ALM_DB) OR ALM_EN THEN ALM_2ND_IN := False ; END_IF ;

        ELSE
            ALM_1ST_IN := False ;
            ALM_2ND_IN := False ;
        END_IF ;
 
         
        MEASURE_DB.DD[Byte_Index + 40] := REAL_TO_DWORD(Calculate);
        MEASURE_DB.DX[Byte_Index + 48 , 5] := ALM_1ST_IN ;
        MEASURE_DB.DX[Byte_Index + 48 , 6] := ALM_2ND_IN ;
        MEASURE_DB.DX[Byte_Index + 48 , 7] := I_ERR_IN ;
        MEASURE_DB.DX[Byte_Index + 49 , 0] := SET_ERR ;       

    END_FOR ;

END_FUNCTION    
